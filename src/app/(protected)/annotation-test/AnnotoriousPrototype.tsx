import React, { useEffect, useRef, useState } from 'react';
import { Save, Download, Upload, RotateCcw, Eye, EyeOff, Settings } from 'lucide-react';

// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Annotorious ‡∏Å‡πà‡∏≠‡∏ô
// npm install @recogito/annotorious
// import { Annotorious } from '@recogito/annotorious';
// import '@recogito/annotorious/dist/annotorious.min.css';

const AnnotoriousImplementation = () => {
  const [annotations, setAnnotations] = useState([]);
  const [currentImage, setCurrentImage] = useState('https://picsum.photos/800/600?random=1');
  const [selectedTool, setSelectedTool] = useState('rect');
  const [selectedCategory, setSelectedCategory] = useState('defect');
  const [isLoading, setIsLoading] = useState(false);
  const [isImageLoaded, setIsImageLoaded] = useState(false);
  
  // References ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Annotorious
  const imageRef = useRef(null);
  const annoRef = useRef(null);
  
  // Mock Annotorious ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo (‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô Annotorious library)
  const [annotoriousReady, setAnnotoriousReady] = useState(false);
  
  // ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà defect ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô vocabulary
  const defectCategories = [
    { id: 'defect', name: 'Defect', color: '#ff4444' },
    { id: 'missing', name: 'Missing Part', color: '#ff8800' },
    { id: 'damage', name: 'Damage', color: '#8800ff' },
    { id: 'good', name: 'Good Area', color: '#00ff44' },
    { id: 'crack', name: 'Crack', color: '#ff0088' },
    { id: 'scratch', name: 'Scratch', color: '#0088ff' }
  ];

  // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Annotorious ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
  useEffect(() => {
    if (!isImageLoaded || !imageRef.current) return;
    
    console.log('üéØ Initializing Annotorious...');
    
    // ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Annotorious instance
    /*
    const anno = new Annotorious({
      image: imageRef.current,
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î widgets ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ
      widgets: [
        'COMMENT', // ‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏™‡πà comment
        { 
          widget: 'TAG',  // ‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å tag/category
          vocabulary: defectCategories.map(cat => cat.name)
        }
      ],
      // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      allowEmpty: false, // ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á annotation ‡πÄ‡∏õ‡∏•‡πà‡∏≤
      readOnly: false,   // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
      headless: false,   // ‡πÅ‡∏™‡∏î‡∏á UI ‡∏Ç‡∏≠‡∏á Annotorious
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î formatter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
      formatter: (annotation) => {
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á annotation
        const category = annotation.bodies?.find(b => b.purpose === 'tagging');
        if (category) {
          const cat = defectCategories.find(c => c.name === category.value);
          return {
            stroke: cat ? cat.color : '#ff0000',
            'stroke-width': 2,
            fill: cat ? cat.color + '33' : '#ff000033'
          };
        }
        return null;
      }
    });
    
    annoRef.current = anno;
    
    // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ events ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    anno.on('createAnnotation', handleAnnotationCreate);
    anno.on('updateAnnotation', handleAnnotationUpdate);
    anno.on('deleteAnnotation', handleAnnotationDelete);
    anno.on('selectAnnotation', handleAnnotationSelect);
    
    setAnnotoriousReady(true);
    
    // Cleanup function
    return () => {
      if (annoRef.current) {
        annoRef.current.destroy();
        annoRef.current = null;
      }
    };
    */
    
    // Mock initialization for demo
    setTimeout(() => {
      setAnnotoriousReady(true);
      console.log('‚úÖ Annotorious initialized (mock)');
    }, 1000);
    
  }, [isImageLoaded]);

  // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á annotation ‡πÉ‡∏´‡∏°‡πà
  const handleAnnotationCreate = (annotation) => {
    console.log('üìù New annotation created:', annotation);
    
    // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• annotation ‡πÉ‡∏ô Annotorious format
    // annotation ‡∏à‡∏∞‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏° W3C Web Annotation Model
    const processedAnnotation = {
      id: annotation.id,
      type: annotation.type || 'Annotation',
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• bodies ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö comment ‡πÅ‡∏•‡∏∞ tags
      bodies: annotation.body || [],
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• target ‡∏à‡∏∞‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      target: annotation.target,
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Product Inspection
      metadata: {
        tool: selectedTool,
        category: selectedCategory,
        timestamp: new Date().toISOString(),
        inspector: 'current-user', // ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö authentication
        confidence: 1.0, // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
        severity: getSeverityFromCategory(selectedCategory)
      }
    };
    
    setAnnotations(prev => [...prev, processedAnnotation]);
    saveAnnotationToBackend(processedAnnotation);
  };

  // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï annotation
  const handleAnnotationUpdate = (annotation, previous) => {
    console.log('‚úèÔ∏è Annotation updated:', annotation);
    console.log('Previous state:', previous);
    
    setAnnotations(prev => 
      prev.map(a => a.id === annotation.id ? {
        ...a,
        ...annotation,
        metadata: {
          ...a.metadata,
          lastModified: new Date().toISOString(),
          modifiedBy: 'current-user'
        }
      } : a)
    );
    
    updateAnnotationInBackend(annotation);
  };

  // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö annotation
  const handleAnnotationDelete = (annotation) => {
    console.log('üóëÔ∏è Annotation deleted:', annotation);
    
    setAnnotations(prev => prev.filter(a => a.id !== annotation.id));
    deleteAnnotationFromBackend(annotation.id);
  };

  // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å annotation
  const handleAnnotationSelect = (annotation) => {
    console.log('üëÜ Annotation selected:', annotation);
    // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô sidebar ‡∏´‡∏£‡∏∑‡∏≠ popup ‡πÑ‡∏î‡πâ
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á
  const getSeverityFromCategory = (category) => {
    const severityMap = {
      'defect': 'high',
      'damage': 'critical',
      'crack': 'critical',
      'missing': 'high',
      'scratch': 'medium',
      'good': 'low'
    };
    return severityMap[category] || 'medium';
  };

  // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const handleImageLoad = () => {
    console.log('üñºÔ∏è Image loaded successfully');
    setIsImageLoaded(true);
  };

  const handleImageError = () => {
    console.log('‚ùå Image failed to load');
    setIsImageLoaded(false);
  };

  // ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• annotations ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö W3C Web Annotation
  const exportAnnotations = () => {
    const webAnnotationFormat = {
      '@context': 'http://www.w3.org/ns/anno.jsonld',
      type: 'AnnotationCollection',
      id: `annotations-${Date.now()}`,
      label: 'Product Inspection Annotations',
      created: new Date().toISOString(),
      generator: {
        type: 'Software',
        name: 'Product Inspection System',
        homepage: window.location.origin
      },
      items: annotations.map(annotation => ({
        ...annotation,
        '@context': 'http://www.w3.org/ns/anno.jsonld'
      }))
    };
    
    const dataStr = JSON.stringify(webAnnotationFormat, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `annotations_${Date.now()}.json`;
    link.click();
    URL.revokeObjectURL(url);
  };

  // ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• annotations
  const importAnnotations = (event) => {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const data = JSON.parse(e.target.result);
        
        let annotationsToImport = [];
        
        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö W3C Web Annotation Collection
        if (data.type === 'AnnotationCollection' && data.items) {
          annotationsToImport = data.items;
        }
        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö array ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        else if (Array.isArray(data)) {
          annotationsToImport = data;
        }
        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö object ‡∏ó‡∏µ‡πà‡∏°‡∏µ annotations property
        else if (data.annotations) {
          annotationsToImport = data.annotations;
        }
        
        if (annotationsToImport.length > 0) {
          // ‡πÉ‡∏ä‡πâ Annotorious API ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î annotations
          if (annoRef.current && annoRef.current.setAnnotations) {
            annoRef.current.setAnnotations(annotationsToImport);
          }
          
          setAnnotations(annotationsToImport);
          console.log('üì• Imported annotations:', annotationsToImport);
        }
        
      } catch (error) {
        console.error('Import error:', error);
        alert('Failed to import annotations. Please check the file format.');
      }
    };
    reader.readAsText(file);
  };

  // ‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• annotations ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const clearAnnotations = () => {
    if (window.confirm('Are you sure you want to clear all annotations?')) {
      if (annoRef.current && annoRef.current.clearAnnotations) {
        annoRef.current.clearAnnotations();
      }
      setAnnotations([]);
      console.log('üßπ All annotations cleared');
    }
  };

  // Mock functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backend operations
  const saveAnnotationToBackend = async (annotation) => {
    setIsLoading(true);
    try {
      // ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
      // const response = await fetch('/api/annotations', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(annotation)
      // });
      
      await new Promise(resolve => setTimeout(resolve, 500));
      console.log('üíæ Saved to backend:', annotation);
    } catch (error) {
      console.error('‚ùå Save failed:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const updateAnnotationInBackend = async (annotation) => {
    try {
      await new Promise(resolve => setTimeout(resolve, 300));
      console.log('üîÑ Updated in backend:', annotation);
    } catch (error) {
      console.error('‚ùå Update failed:', error);
    }
  };

  const deleteAnnotationFromBackend = async (annotationId) => {
    try {
      await new Promise(resolve => setTimeout(resolve, 200));
      console.log('üóëÔ∏è Deleted from backend:', annotationId);
    } catch (error) {
      console.error('‚ùå Delete failed:', error);
    }
  };

  return (
    <div className="max-w-6xl mx-auto p-4 bg-gray-50 min-h-screen">
      <h1 className="text-3xl font-bold mb-6 text-center text-gray-800">
        üìä Annotorious Implementation - Product Inspection
      </h1>
      
      {/* Control Panel */}
      <div className="bg-white rounded-lg shadow-md p-4 mb-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          
          {/* Tool Selection */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Annotation Tool
            </label>
            <select 
              value={selectedTool}
              onChange={(e) => setSelectedTool(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
            >
              <option value="rect">Rectangle</option>
              <option value="polygon">Polygon</option>
              <option value="point">Point</option>
              <option value="circle">Circle</option>
              <option value="ellipse">Ellipse</option>
              <option value="freehand">Freehand</option>
            </select>
          </div>

          {/* Category Selection */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Defect Category
            </label>
            <select 
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
            >
              {defectCategories.map(cat => (
                <option key={cat.id} value={cat.id}>
                  {cat.name}
                </option>
              ))}
            </select>
          </div>

          {/* Image Selection */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Sample Image
            </label>
            <select 
              value={currentImage}
              onChange={(e) => {
                setCurrentImage(e.target.value);
                setIsImageLoaded(false);
                setAnnotoriousReady(false);
                setAnnotations([]);
              }}
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
            >
              <option value="https://picsum.photos/800/600?random=1">Sample Product 1</option>
              <option value="https://picsum.photos/800/600?random=2">Sample Product 2</option>
              <option value="https://picsum.photos/800/600?random=3">Sample Product 3</option>
            </select>
          </div>

          {/* Annotorious Status */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Annotorious Status
            </label>
            <div className={`p-2 rounded-md text-sm font-medium ${
              annotoriousReady 
                ? 'bg-green-100 text-green-800' 
                : 'bg-yellow-100 text-yellow-800'
            }`}>
              {annotoriousReady ? '‚úÖ Ready' : '‚è≥ Initializing...'}
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-wrap gap-2 mt-4">
          <button
            onClick={exportAnnotations}
            disabled={annotations.length === 0}
            className="px-4 py-2 bg-green-600 text-white rounded-md flex items-center gap-2 disabled:bg-gray-400"
          >
            <Download size={16} />
            Export W3C Format ({annotations.length})
          </button>
          
          <label className="px-4 py-2 bg-purple-600 text-white rounded-md flex items-center gap-2 cursor-pointer">
            <Upload size={16} />
            Import Annotations
            <input
              type="file"
              accept=".json"
              onChange={importAnnotations}
              className="hidden"
            />
          </label>
          
          <button
            onClick={clearAnnotations}
            disabled={annotations.length === 0}
            className="px-4 py-2 bg-red-600 text-white rounded-md flex items-center gap-2 disabled:bg-gray-400"
          >
            <RotateCcw size={16} />
            Clear All
          </button>
          
          <div className="flex items-center gap-2 ml-auto">
            {isLoading && (
              <div className="flex items-center gap-2 text-blue-600">
                <div className="animate-spin rounded-full h-4 w-4 border-2 border-blue-600 border-t-transparent"></div>
                Saving...
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Main Content Area */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        
        {/* Image Annotation Area */}
        <div className="lg:col-span-2">
          <div className="bg-white rounded-lg shadow-md p-4">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">Product Image with Annotorious</h2>
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <Settings size={16} />
                {selectedTool} ‚Ä¢ {defectCategories.find(c => c.id === selectedCategory)?.name}
              </div>
            </div>
            
            <div className="relative border-2 border-dashed border-gray-300 rounded-lg p-4">
              {/* ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà Annotorious ‡∏à‡∏∞‡πÅ‡∏ô‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ */}
              <img
                ref={imageRef}
                src={currentImage}
                alt="Product for inspection"
                onLoad={handleImageLoad}
                onError={handleImageError}
                className="w-full h-auto rounded-lg shadow-sm"
                style={{ maxHeight: '500px', objectFit: 'contain' }}
              />
              
              {/* Overlay ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Annotorious */}
              {!annotoriousReady && isImageLoaded && (
                <div className="absolute inset-4 flex items-center justify-center bg-blue-50 rounded-lg bg-opacity-90">
                  <div className="text-center text-blue-700">
                    <div className="animate-spin rounded-full h-8 w-8 border-2 border-blue-700 border-t-transparent mx-auto mb-2"></div>
                    <p className="font-medium">Initializing Annotorious...</p>
                  </div>
                </div>
              )}
            </div>
            
            {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô */}
            <div className="mt-4 p-3 bg-blue-50 rounded-lg">
              <p className="text-sm text-blue-800">
                <strong>üìù Annotorious Instructions:</strong> 
                {annotoriousReady ? (
                  <>
                    Click and drag to create annotations using the selected tool ({selectedTool}). 
                    Right-click on existing annotations to edit or delete them. 
                    Use the annotation editor to add comments and tags.
                  </>
                ) : (
                  'Waiting for Annotorious to initialize...'
                )}
              </p>
            </div>
          </div>
        </div>

        {/* Annotations Panel */}
        <div className="lg:col-span-1">
          <div className="bg-white rounded-lg shadow-md p-4">
            <h2 className="text-xl font-semibold mb-4">
              Annotations ({annotations.length})
            </h2>
            
            {/* Annotorious Feature List */}
            <div className="mb-4">
              <h3 className="text-sm font-medium text-gray-700 mb-2">Available Features</h3>
              <div className="space-y-1 text-xs text-gray-600">
                <div>‚úÖ Multiple annotation tools</div>
                <div>‚úÖ Rich text comments</div>
                <div>‚úÖ Tagging system</div>
                <div>‚úÖ W3C Web Annotation format</div>
                <div>‚úÖ Plugin architecture</div>
                <div>‚úÖ Keyboard shortcuts</div>
                <div>‚úÖ Responsive design</div>
                <div>‚úÖ Export/Import</div>
              </div>
            </div>

            {/* Category Legend */}
            <div className="mb-4">
              <h3 className="text-sm font-medium text-gray-700 mb-2">Categories</h3>
              <div className="grid grid-cols-2 gap-1">
                {defectCategories.map(cat => (
                  <div key={cat.id} className="flex items-center gap-2 text-xs">
                    <div 
                      className="w-3 h-3 rounded border"
                      style={{ backgroundColor: cat.color }}
                    ></div>
                    <span>{cat.name}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Annotations List */}
            <div className="space-y-2 max-h-64 overflow-y-auto">
              {annotations.length === 0 ? (
                <div className="text-gray-500 text-center py-8">
                  <p>No annotations yet.</p>
                  <p className="text-sm mt-2">
                    {annotoriousReady 
                      ? 'Start annotating on the image using the tools above.' 
                      : 'Waiting for Annotorious to be ready...'
                    }
                  </p>
                </div>
              ) : (
                annotations.map((annotation, index) => (
                  <div key={annotation.id} className="border rounded-lg p-3 bg-gray-50">
                    <div className="flex justify-between items-start mb-2">
                      <span className="text-sm font-medium">
                        Annotation #{index + 1}
                      </span>
                      <span className="text-xs px-2 py-1 bg-blue-100 text-blue-800 rounded">
                        {annotation.metadata?.tool || 'Unknown'}
                      </span>
                    </div>
                    <div className="text-xs text-gray-600 space-y-1">
                      <div>Category: {annotation.metadata?.category}</div>
                      <div>Severity: {annotation.metadata?.severity}</div>
                      <div>Created: {new Date(annotation.metadata?.timestamp).toLocaleString()}</div>
                      {annotation.bodies?.length > 0 && (
                        <div>
                          Bodies: {annotation.bodies.length} item(s)
                        </div>
                      )}
                    </div>
                  </div>
                ))
              )}
            </div>

            {/* Annotorious vs Custom Comparison */}
            <div className="mt-4 pt-4 border-t">
              <h3 className="text-sm font-medium text-gray-700 mb-2">
                Annotorious vs Custom
              </h3>
              <div className="text-xs text-gray-600 space-y-1">
                <div>üìä Data: W3C Standard</div>
                <div>üé® UI: Built-in widgets</div>
                <div>üîß Tools: Extensible</div>
                <div>üì± Responsive: Automatic</div>
                <div>üîå Plugins: Available</div>
                <div>‚ö° Performance: Optimized</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Debug Console */}
      <div className="mt-6 bg-gray-900 text-green-400 rounded-lg p-4 font-mono text-sm">
        <h3 className="text-white mb-2">üîß Annotorious Debug Console</h3>
        <div className="space-y-1">
          <div>Image loaded: {isImageLoaded ? '‚úÖ' : '‚ùå'}</div>
          <div>Annotorious ready: {annotoriousReady ? '‚úÖ' : '‚ùå'}</div>
          <div>Selected tool: {selectedTool}</div>
          <div>Selected category: {selectedCategory}</div>
          <div>Total annotations: {annotations.length}</div>
          <div>Library: @recogito/annotorious</div>
          <div>Data format: W3C Web Annotation Model</div>
        </div>
      </div>

      {/* Installation Instructions */}
      <div className="mt-6 bg-blue-50 rounded-lg p-4">
        <h3 className="text-lg font-semibold text-blue-900 mb-2">
          üí° ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Annotorious ‡∏à‡∏£‡∏¥‡∏á
        </h3>
        <div className="text-sm text-blue-800 space-y-2">
          <p><strong>1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á package:</strong></p>
          <code className="block bg-blue-100 p-2 rounded">npm install @recogito/annotorious</code>
          
          <p><strong>2. Import ‡πÉ‡∏ô component:</strong></p>
          <code className="block bg-blue-100 p-2 rounded">
            import {`{ Annotorious }`} from '@recogito/annotorious';<br/>
            import '@recogito/annotorious/dist/annotorious.min.css';
          </code>
          
          <p><strong>3. ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà mock code ‡∏î‡πâ‡∏ß‡∏¢ real implementation ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡πâ‡∏ô‡∏ó‡πå</strong></p>
          
          <p className="text-blue-600">
            <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô demo ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 
            ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
          </p>
        </div>
      </div>
    </div>
  );
};

export default AnnotoriousImplementation;